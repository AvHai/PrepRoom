import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { PenSquare, User } from "lucide-react"
import InterviewCard from "@/components/shared/InterviewCard"
import OpportunityCard from "@/components/shared/OpportunityCard"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import usericon from "../assets/avatar.png";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import React, { useEffect } from "react";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { RouteIndex } from "@/helpers/RouteName";
import { getEnv } from "@/helpers/getEnv";
import { showToast } from "@/helpers/showToast";
import { useDispatch, useSelector } from "react-redux";
import { Textarea } from "@/components/ui/textarea";
import { useFetch } from "@/hooks/use-fetch";
import Loading from "@/components/Loading";
import { IoCameraOutline } from "react-icons/io5";

// Mock data for user profile
const mockUser = {
  id: "user1",
  name: "Jane Smith",
  email: "jane.smith@example.com",
  bio:
    "Software Engineer with 2 years of experience. Passionate about web development and sharing knowledge with the community.",
  avatar: undefined
}

// Mock interview experiences by user
const mockUserInterviews = [
  {
    id: "101",
    title: "My Google Frontend Interview",
    company: {
      id: "google",
      name: "Google"
    },
    role: {
      id: "frontend-developer",
      name: "Frontend Developer"
    },
    date: "2023-11-15",
    difficultyLevel: "hard",
    tags: [
      { id: "javascript", name: "JavaScript" },
      { id: "react", name: "React" },
      { id: "dsa", name: "DSA" }
    ],
    author: {
      id: "user1",
      name: "Jane Smith"
    },
    content: "My Google interview experience was challenging but rewarding..."
  },
  {
    id: "102",
    title: "Microsoft SDE Interview Experience",
    company: {
      id: "microsoft",
      name: "Microsoft"
    },
    role: {
      id: "software-engineer",
      name: "Software Engineer"
    },
    date: "2024-01-20",
    difficultyLevel: "medium",
    tags: [
      { id: "system-design", name: "System Design" },
      { id: "coding", name: "Coding" }
    ],
    author: {
      id: "user1",
      name: "Jane Smith"
    },
    content: "The Microsoft interview process consisted of several rounds..."
  }
]

// Mock opportunities posted by user
const mockUserOpportunities = [
  {
    id: "201",
    company: {
      id: "amazon",
      name: "Amazon"
    },
    role: "Frontend Engineer",
    type: "full-time",
    location: "remote",
    stipend: "â‚¹20,00,000/year",
    applicationDeadline: "2024-05-15",
    applyLink: "https://amazon.jobs",
    eligibility:
      "B.Tech/B.E. in Computer Science or related field with knowledge of React",
    description: "We are looking for a frontend engineer to join our team...",
    author: {
      id: "user1",
      name: "Jane Smith"
    },
    postedOn: "2024-03-01"
  }
]

const Profile2 = () => {
   const user = useSelector((state) => state.user);
  const {
    data:userData,
    loading,
    error,
  } = useFetch(
    user.user._id
      ? `${getEnv("VITE_API_BASE_URL")}/user/get-user/${user.user._id}`: null,
    { method: "get", credentials: "include" }
  );
  const dispatch = useDispatch();
  const formSchema = z.object({
    name: z.string().min(3, "Name must be atleast 3 character long"),
    email: z.string().email(),
    bio: z.string().min(4, "Bio must be atleast 4 character long"),
    password: z.string(),
  });

  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      bio: "",
      password: "",
    },
  });

  useEffect(() => {
    if (userData && userData.success) {
      form.reset({
        name: userData.user.name,
        email: userData.user.email,
        bio: userData.user.bio || "",
      });
    }
  }, [userData]);

 
  async function onSubmit(values) {
    try {
      const response = await fetch(
        `${getEnv("VITE_API_BASE_URL")}/auth/login`,
        {
          method: "post",
          headers: { "Content-type": "application/json" },
          credentials: "include",
          body: JSON.stringify(values),
        }
      );
      const data = await response.json();
      if (!response.ok) {
        return showToast("error", data.message);
      }
      dispatch(setUser(data.user));
      navigate(RouteIndex);
      showToast("success", data.message);
    } catch (error) {
      showToast("error", error.message);
    }
  }
  if (loading) return <Loading />;

  // Get initials for avatar fallback
  const getInitials = (name) => {
    if (!name) return "?"; // Fallback if name is undefined or null
    return name
      .split(" ")
      .map((part) => part.charAt(0))
      .join("")
      .toUpperCase();
  };

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">My Profile</h1>
        <p className="text-muted-foreground">
          Manage your posts and account settings
        </p>
      </div>
        
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* User profile sidebar */}
        <div className="col-span-1">
          <Card className="card-glow">
            <CardHeader className="text-center">
              <Avatar className="w-24 h-24 mx-auto">
                {user.avatar ? (
                  <AvatarImage src={user.avatar} alt={userData.user.name} />
                ) : (
                  <AvatarFallback>
                    {userData && userData.user ? getInitials(userData.user.name) : "?"}
                  </AvatarFallback>
                )}
              </Avatar>
              <CardTitle className="mt-4">
                {userData && userData.user ? userData.user.name : "Loading..."}
              </CardTitle>
              <p className="text-sm text-muted-foreground">{userData && userData.user ? userData.user.email : "Loading..."}</p>
            </CardHeader>
            <CardContent>
              <p className="text-sm mb-4">{userData && userData.user ? userData.user.bio : "Loading..."}</p>
              <div className="flex flex-col gap-2">
                {/* <Button
                  variant="outline"
                  className="w-full flex items-center gap-2"
                >
                  <User size={16} />
                  Edit Profile
                </Button> */}
                <div>
                          <Form {...form}>
                            <form onSubmit={form.handleSubmit(onSubmit)}>
                              <div className="mb-3">
                                <FormField
                                  control={form.control}
                                  name="name"
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>Name</FormLabel>
                                      <FormControl>
                                        <Input placeholder="Enter your Name" {...field} />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                              <div className="mb-3">
                                <FormField
                                  control={form.control}
                                  name="email"
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>Email</FormLabel>
                                      <FormControl>
                                        <Input
                                          placeholder="Enter your email address"
                                          {...field}
                                        />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                              <div className="mb-3">
                                <FormField
                                  control={form.control}
                                  name="bio"
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>Bio</FormLabel>
                                      <FormControl>
                                        <Textarea placeholder="Enter your bio" {...field} />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                              <div className="mb-3">
                                <FormField
                                  control={form.control}
                                  name="password"
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>Password</FormLabel>
                                      <FormControl>
                                        <Input
                                          type="password"
                                          placeholder="Enter your password"
                                          {...field}
                                        />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                              <div className="mt-5">
                                <Button type="submit" className="w-full">
                                  Save Changes
                                </Button>
                              </div>
                            </form>
                          </Form>
                        </div>
                <Button
                  variant="default"
                  className="w-full flex items-center gap-2"
                >
                  <PenSquare size={16} />
                  Create New Post
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* User content tabs */}
        <div className="col-span-1 lg:col-span-3">
          <Tabs defaultValue="interviews" className="w-full">
            <TabsList className="grid grid-cols-2 mb-6">
              <TabsTrigger value="interviews">My Interviews</TabsTrigger>
              <TabsTrigger value="opportunities">My Opportunities</TabsTrigger>
            </TabsList>

            <TabsContent value="interviews">
              <div>
                <h2 className="text-xl font-medium mb-4">
                  Your Interview Experiences
                </h2>
                {mockUserInterviews.length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {mockUserInterviews.map(interview => (
                      <InterviewCard key={interview.id} interview={interview} />
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <h3 className="text-lg font-medium mb-2">
                      No interviews posted yet
                    </h3>
                    <p className="text-muted-foreground mb-4">
                      Share your interview experiences to help others
                    </p>
                    <Button>Share Interview Experience</Button>
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent value="opportunities">
              <div>
                <h2 className="text-xl font-medium mb-4">
                  Job Opportunities You've Posted
                </h2>
                {mockUserOpportunities.length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {mockUserOpportunities.map(opportunity => (
                      <OpportunityCard
                        key={opportunity.id}
                        opportunity={opportunity}
                      />
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <h3 className="text-lg font-medium mb-2">
                      No opportunities posted yet
                    </h3>
                    <p className="text-muted-foreground mb-4">
                      Help others by sharing job opportunities
                    </p>
                    <Button>Post a Job Opportunity</Button>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )
}

export default Profile2


import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { format } from "date-fns"
import { Calendar, Star } from "lucide-react"
import { Link } from "react-router-dom"

const getDifficultyColor = level => {
  switch (level) {
    case "easy":
      return "bg-green-500/10 text-green-500 border-green-500/30"
    case "medium":
      return "bg-yellow-500/10 text-yellow-500 border-yellow-500/30"
    case "hard":
      return "bg-red-500/10 text-red-500 border-red-500/30"
    default:
      return "bg-primary/10 text-primary border-primary/30"
  }
}

const InterviewCard = ({ interview }) => {
  const {
    id,
    company,
    role,
    date,
    difficultyLevel,
    tags,
    author,
    title
  } = interview

  const difficultyColor = getDifficultyColor(difficultyLevel)
  const formattedDate = format(new Date(date), "MMM dd, yyyy")

  // Get initials for avatar fallback
  const getInitials = name => {
    return name
      .split(" ")
      .map(part => part.charAt(0))
      .join("")
      .toUpperCase()
  }

  return (
    <Link to={`/interviews/${id}`}>
      <Card className="card-glow h-full flex flex-col hover:shadow-md transition-shadow duration-300">
        <CardHeader className="pb-3 pt-4">
          <div className="flex justify-between items-start">
            <div>
              <Badge
                variant="outline"
                className="mb-2 border-primary/40 bg-primary/5"
              >
                {company.name}
              </Badge>
              <h3 className="text-lg font-semibold leading-tight hover:text-primary transition-colors duration-200">
                {title}
              </h3>
            </div>
            <Badge variant="outline" className={`${difficultyColor}`}>
              {difficultyLevel.charAt(0).toUpperCase() +
                difficultyLevel.slice(1)}
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="pb-2">
          <div className="flex items-center text-sm text-muted-foreground mb-2">
            <Star className="h-4 w-4 mr-1" />
            <span>{role.name}</span>
          </div>

          <div className="flex items-center text-sm text-muted-foreground">
            <Calendar className="h-4 w-4 mr-1" />
            <span>{formattedDate}</span>
          </div>
        </CardContent>
        <CardFooter className="mt-auto pt-4 flex items-center justify-between border-t border-border">
          <div className="flex items-center gap-2">
            <Avatar className="h-6 w-6">
              {author.avatar ? (
                <AvatarImage src={author.avatar} alt={author.name} />
              ) : (
                <AvatarFallback>{getInitials(author.name)}</AvatarFallback>
              )}
            </Avatar>
            <span className="text-sm text-muted-foreground">{author.name}</span>
          </div>
          <div className="flex flex-wrap gap-1">
            {tags.slice(0, 2).map(tag => (
              <Badge
                key={tag.id}
                variant="secondary"
                className="text-xs px-1.5"
              >
                {tag.name}
              </Badge>
            ))}
            {tags.length > 2 && (
              <Badge variant="secondary" className="text-xs px-1.5">
                +{tags.length - 2}
              </Badge>
            )}
          </div>
        </CardFooter>
      </Card>
    </Link>
  )
}

export default InterviewCard